#define battery_width 84
#define battery_height 44

#define BATTERY_INNER_BORDER 4
#define BATTERY_INNER_X 6 + BATTERY_INNER_BORDER
#define BATTERY_INNER_Y 7 + BATTERY_INNER_BORDER
#define BATTERY_INNER_H 30 - BATTERY_INNER_BORDER*2
#define BATTERY_INNER_W 68 - BATTERY_INNER_BORDER*2



static unsigned char battery_bits[] = {
   0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xfe,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xfc, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xfc, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfc, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
   0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x07, 0x3f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc0, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xc0, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xc0, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x3f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x3f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xfc, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xfc, 0x07, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xfc, 0x03, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfc, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
   0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x3f, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x1f, 0x00 };



/*
void display_draw_battery_screen(float percent)
{
    static int last_inner_w;
    int inner_w = ((float) BATTERY_INNER_W)*percent;
    if(last_inner_w != inner_w) {
        display.clearDisplay();
        display.drawXBitmap(BATTERY_X,BATTERY_Y, battery_bits,battery_width,battery_height,SSD1306_WHITE);
	    display.fillRect(BATTERY_X + BATTERY_INNER_X, BATTERY_Y + BATTERY_INNER_Y,
                         inner_w,BATTERY_INNER_H,SSD1306_WHITE);
        display.display();
        last_inner_w = inner_w;
    }
}

void display_draw_low_battery_screen()
{
    display.clearDisplay();
    display.drawXBitmap(BATTERY_X,BATTERY_Y, battery_bits,battery_width,battery_height,SSD1306_WHITE);
    display.setCursor(BATTERY_X + BATTERY_INNER_X + ((BATTERY_INNER_W-12*3)/2),
                      BATTERY_Y + BATTERY_INNER_Y + ((BATTERY_INNER_H-16)/2));
    display.setTextColor(SSD1306_WHITE);
    display.setTextSize(2);
    display.print("Low");    
}

void draw_header()
{
    int inner_w = ((float) BATTERY_HEADER_INNER_WIDTH)*battery_percent;
    display.drawXBitmap(0,0, BATTERY_HEADER_bits,BATTERY_HEADER_WIDTH,BATTERY_HEADER_HEIGHT,SSD1306_WHITE);
	display.fillRect(BATTERY_HEADER_INNER_X,BATTERY_HEADER_INNER_Y,inner_w,
                    BATTERY_HEADER_INNER_HEIGHT,SSD1306_WHITE);    

    if(wifi_connected) {
        display.drawXBitmap(SCREEN_WIDTH-WIFI_width,0, WIFI_bits,WIFI_width,WIFI_height,SSD1306_WHITE);
    }
}


void display_draw_progress_screen(float progress)
{
    display.clearDisplay();
    int width = ((float) PROGRESS_WIDTH-4)*progress;
    
    display.drawRoundRect(PROGRESS_X, PROGRESS_Y, PROGRESS_WIDTH, PROGRESS_HEIGHT, 4, SSD1306_WHITE);
    display.fillRoundRect(PROGRESS_X+2, PROGRESS_Y+2, width, PROGRESS_HEIGHT-4, 2, SSD1306_WHITE);
    display.display();
}

void display_draw_error_screen(control_error_t error) {
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextColor(SSD1306_WHITE); 
    display.setTextSize(2);
    display.print("Error");
}

*/
